
struct Nat := 
   0 : Obj;
   succ : Obj( Obj );
end;

def isclosed( s: Nat ) ( P: Form(Obj) ) :=
    P( s.0 ) & [ x: Obj ] P( x ) -> P( s. succ( x )) : Form;

def gen( s: Nat )( x : Obj ) :=
   [ P : Form( Obj ) ] { strict(P) } -> s. isclosed(P) -> P(x) : Form ;

thm induction : [ s: Nat, P: Form(Obj) ] 
   { stricton( s. gen, P ) } -> P( s.0 ) -> 
      ( [ x: Obj ] { s. gen(x) } -> P( x ) -> P( s. succ( x ))) -> 
         [ x: Obj ] { s. gen(x) } -> P( x );

def homrel( s1,s2: Nat )( R: Form(Obj,Obj) ) :=
   R( s1.0, s2.0 ) & [ x1,x2: Obj ] { s1. gen( x1 ) & s2. gen( x2 ) } -> 
        R( x1, x2 ) -> R( s1. succ( x1 ), s2. succ(x2) ) : Form; 

def freegen( s1 : Nat ) :=
   [ s2 : Nat ] < R : Form( Obj, Obj ) > 
   { stricton( prod( s1. gen, s2. gen ), R ) } &
      homrel( s1, s2, R ) & linear( s1. gen, s2. gen, R ) : Form ;

def minhomrel( s1,s2: Nat ) :=
   inductive( prod( s1. gen, s2. gen ), homrel( s1, s2 )) : Form(Obj,Obj) ; 

//   [ P: Form(Obj,Obj) ] { stricton( prod( s1. gen, s2. gen ), P ) } -> 
//      homrel( s1, s2, P ) -> P( x1, x2 ) : Form ;

thm just : [ s1,s2: Nat ] [ x1,x2: Obj ] 
   { s1. gen(x1) & s2.gen(x2) } -> minhomrel( s1, s2, x1, x2 ) -> 
      x1 == s1.0 & x2 == s2.0 | 
      < y1,y2: Obj > { s1. gen(y1) & s2. gen(y2) } & 
          minhomrel( s1, s2, y1, y2 ) & 
             x1 == s1. succ(y1) & x2 == s2. succ(y2);

