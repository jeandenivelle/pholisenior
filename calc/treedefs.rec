
%dir calc
%namespace calc

%define extension ( seq_blocking )

%option belief { seq_belief } => # name : logic::exact, visible : bool 
%option blocking { seq_blocking } => # nr : size_t 

%h_incl {
   #include "logic/term.h" 
   #include "logic/exact.h"
}

%define proofterm ( prf_truthconst )
%option truthconst { prf_truthconst } =>
   // The truth constant (in Kleene logic).
%option tautology { prf_tautology } => fm : logic::term
%option exact { prf_exact } => exact : logic::exact
%option ident { prf_ident } => ident : identifier
%option clausify { prf_clausify } => parent : proofterm
%option branch { prf_branch } =>
   conj : size_t, disj : size_t, parent : proofterm, 
      name : std::string, first : proofterm
%option expand { prf_expand } => 
   ident : identifier, occ : size_t, parent : proofterm 
%option define { prf_define } =>
   name : std::string, val : logic::term, parent : proofterm

%option unfinished { prf_unfinished } => [ show : proofterm ] 

%h_incl {
   #include "sequent.h"
}

%h_methods {

   void print( std::ostream& out ) const;
}


%cpp_back
{
   void calc::proofterm::print( std::ostream& out ) const
   {
      switch( sel( ))
      {
      case prf_truthconst:
         out << "truthconst( )";
         return; 

      case prf_ident:
         out << "ident( " << view_ident( ). ident( ) << " )"; 
         return; 

      case prf_clausify:
         out << "clausify( " << view_clausify( ). parent( ) << " )";
         return; 

      case prf_branch:
         {
            auto res = view_branch( ); 
            out << "branch( "; 
            out << res. conj( ) << "/" << res.disj( ) << ", ";
            out << "assume " << res. name( ) << " in " << res. first( ) << " )";
            return;
         }

      case prf_expand:
         {
            auto exp = view_expand( );
            out << "expand( ";
            out << exp. ident( ) << ", " << exp. occ( ) << ", ";
            out << exp. parent( ) << " )";
            return;  
         }

      case prf_define:
         {
            auto def = view_define( );
            out << "define( ";
            out << def. name( ) << ", "; 
            out << def. val( ) << ", "; 
            out << def. parent( ) << " )";
            return;
         }

      case prf_unfinished:
         {
            out << "unfinished(";
            auto unf = view_unfinished( );
            for( size_t i = 0; i != unf. size( ); ++ i )
            {
               if(i) 
                  out << ", ";
               else
                  out << " ";
               out << unf. show(i);
            }
            out << " )";
         }
         return;
      }

      out << sel( ) << "\n";
      throw std::logic_error( "don't know how to print" );
   }

}

 
